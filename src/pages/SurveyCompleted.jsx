import { useState, useEffect, useContext } from "react";
import { SurveyContext } from "../context/SurveyContext";
import { db } from "../firebaseConfig";
import { doc, getDoc } from "firebase/firestore";
import { Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Tooltip } from "recharts";
import { useNavigate } from "react-router-dom";

const SurveyCompleted = () => {
  const { surveyData, setSurveyData } = useContext(SurveyContext);
  const navigate = useNavigate();
  const [blanchScore, setBlanchScore] = useState(null);
  const [burnoutScores, setBurnoutScores] = useState(null);
  const [description, setDescription] = useState("");
  const [burnoutDiagnosis, setBurnoutDiagnosis] = useState("");
  const [recommendations, setRecommendations] = useState([]);

  useEffect(() => {
    const fetchUserData = async () => {
      if (surveyData.SujetoId) {
        const userRef = doc(db, "surveys", surveyData.SujetoId.toString());
        const userSnapshot = await getDoc(userRef);
        if (userSnapshot.exists()) {
          const data = userSnapshot.data();
          setSurveyData(data);
          calculateBlanchScale(data);
          calculateBurnout(data.workFeelings || {});
        }
      }
    };
    fetchUserData();
  }, [surveyData.SujetoId, setSurveyData]);

  const calculateBlanchScale = (data) => {
    const getAverage = (category) => {
      const values = Object.values(data[category] || {}).map(Number);
      return values.length ? values.reduce((a, b) => a + b, 0) / values.length : 0;
    };

    const scores = {
      "Regulaci√≥n": getAverage("workConditionsRegulations"),
      "Desarrollo": getAverage("workConditionsDeveloper"),
      "Entorno Material": getAverage("materialWorkEnvironment"),
      "Entorno Social": getAverage("socialWorkEnvironment"),
      "Ajuste Organizaci√≥n-Persona": getAverage("adjustmentPeopleOrganization"),
      "Adaptaci√≥n Persona-Organizaci√≥n": getAverage("adaptionPeopleOrganization"),
    };

    const allResponses = Object.values(scores);
    const totalScore = allResponses.length ? allResponses.reduce((a, b) => a + b, 0) / allResponses.length : 0;

    let desc = "";
    if (totalScore <= 2.9) desc = "üî•üî• Condiciones de trabajo p√©simas: Seg√∫n este cuestionario (Blanch), su ambiente laboral es altamente negativo, tiene riesgos f√≠sicos, emocionales o psicol√≥gicos severos, sobrecarga laboral y falta de control sobre las tareas; las relaciones laborales son conflictivas y hay falta de apoyo por parte de los superiores o compa√±eros, con escasa o nula estabilidad laboral y bajos salarios.";
    else if (totalScore <= 5.9) desc = "üî• Condiciones de trabajo malas: Seg√∫n este cuestionario (Blanch), en su trabajo existen problemas laborales significativos, aunque no extremos. Puede haber sobrecarga laboral o falta de recursos para realizar las tareas, el clima laboral es tenso o con poco apoyo, existe inseguridad laboral o los salarios son insuficientes en relaci√≥n con el esfuerzo y hay estr√©s laboral frecuente.";
    else if (totalScore <= 8.9) desc = "‚ö† Condiciones de trabajo buenas: Seg√∫n este cuestionario (Blanch), el trabajador percibe un entorno laboral adecuado y funcional. Hay buen equilibrio entre las exigencias y los recursos disponibles, el clima laboral es mayormente positivo con apoyo de compa√±eros y superiores, la remuneraci√≥n es aceptable y hay estabilidad. Los niveles de estr√©s son moderados o bajos.";
    else desc = "‚úÖ Condiciones de trabajo √≥ptimas: Seg√∫n este cuestionario (Blanch), el trabajador percibe su entorno como ideal. Hay recursos suficientes para desempe√±ar las tareas sin sobrecarga, el clima laboral es excelente, las relaciones interpersonales son positivas, hay buena estabilidad y condiciones contractuales favorables, con alta satisfacci√≥n y bienestar en el trabajo.";

    setBlanchScore(scores);
    setDescription(desc);
  };

  const calculateBurnout = (responses) => {
    const sumValues = (indexes) =>
      indexes.reduce((sum, index) => sum + (parseInt(responses[index]) || 0), 0);

    const CE = sumValues([1, 2, 3, 6, 8, 13, 14, 20]);
    const DP = sumValues([5, 10, 11, 15, 16, 22]);
    const RP = sumValues([4, 7, 9, 12, 17, 18, 19, 21]);

    setBurnoutScores({ CE, DP, RP });

    let diagnosis = "";
    let recommendationsList = [];

    if (CE >= 27 || DP >= 10 || RP <= 33) {
      diagnosis = "üî• Alto riesgo de Burnout: Presentas altos niveles de cansancio emocional y despersonalizaci√≥n, lo que indica una gran fatiga y distanciamiento del trabajo.";
      recommendationsList = ["Es importante buscar apoyo, delegar tareas y considerar estrategias para manejar el estr√©s", "Consultar con un especialista podr√≠a ser beneficioso."];
    } else if ((CE >= 17 && CE <= 26) || (DP >= 6 && DP <= 9) || (RP >= 34 && RP <= 39)) {
      diagnosis = "‚ö† Riesgo moderado de Burnout: Experimentas un nivel bajo de realizaci√≥n personal, lo que puede afectar la motivaci√≥n y satisfacci√≥n en el trabajo.";
      recommendationsList = ["Practica t√©cnicas de relajaci√≥n", "Establece pausas activas", "Identificar aspectos positivos del trabajo, establecer metas claras y fomentar el reconocimiento de logros puede ayudar a mejorar la percepci√≥n laboral.", ];
    } else {
      diagnosis = "‚úÖ Bajo riesgo de Burnout: Tus niveles de estr√©s y satisfacci√≥n laboral est√°n equilibrados.";
      recommendationsList = ["Mant√©n h√°bitos saludables y estrategias de autocuidado para prevenir el desgaste laboral.", "Mant√©n un equilibrio vida-trabajo."];
    }

    setBurnoutDiagnosis(diagnosis);
    setRecommendations(recommendationsList);
  };

  return (
    <div 
    className="container-fluid d-flex justify-content-center align-items-center" 
    style={{ backgroundImage: "url('/background.jpg')", backgroundSize: "cover", backgroundColor: "rgba(255, 255, 255, 0.7)", backdropFilter: "blur(5px)" }}>
      <div className="container p-4 rounded shadow-lg text-center" style={{ background: "rgba(255, 255, 255, 0.9)" }}>
      <h2>üìä ¬°Gracias por completar el cuestionario!</h2>
      <p>Tu opini√≥n es muy valiosa y nos ayudar√° a mejorar las condiciones laborales de nuestros profesionales.</p>
      {blanchScore && (
        <>
          <h3>Resultados de las Condiciones Laborales</h3>
          <p>{description}</p>
          <div className="d-flex justify-content-center">
          <RadarChart outerRadius={120} width={500} height={400} data={Object.entries(blanchScore).map(([key, value]) => ({ name: key, score: value }))}>
            <PolarGrid />
            <PolarAngleAxis dataKey="name" tick={{ fontSize: 12 }} />
            <PolarRadiusAxis angle={30} domain={[0, 10]} />
            <Radar name="Escala de Blanch" dataKey="score" stroke="#8884d8" fill="#8884d8" fillOpacity={0.6} />
            <Tooltip />
          </RadarChart>
          </div>
        </>
      )}
      {burnoutScores && (
        <>
          <h3>üìä Resultados de la Evaluaci√≥n de Burnout</h3>
          <p>{burnoutDiagnosis}</p>
          <ul className="text-start">
            {recommendations.map((rec, index) => (
              <li key={index}>{rec}</li>
            ))}
          </ul>
          <div className="d-flex justify-content-center">

          <RadarChart outerRadius={120} width={500} height={400} data={[
            { name: "Cansancio Emocional", score: burnoutScores.CE },
            { name: "Despersonalizaci√≥n", score: burnoutScores.DP },
            { name: "Realizaci√≥n Personal", score: burnoutScores.RP }
          ]}>
            <PolarGrid />
            <PolarAngleAxis dataKey="name" tick={{ fontSize: 12 }} />
            <PolarRadiusAxis angle={30} domain={[0, 40]} />
            <Radar name="Burnout" dataKey="score" stroke="#FF5733" fill="#FF5733" fillOpacity={0.6} />
            <Tooltip />
          </RadarChart>
          </div>

        </>
        
      )}
      <h2>La informaci√≥n aqu√≠ mostrada es basada en un an√°lisis algor√≠tmico pero no representa un diagn√≥stico cl√≠nico.</h2>
      </div>
    </div>
  );
};

export default SurveyCompleted;
